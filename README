# Vrit Kanban Board

This project is a Kanban board application built with React, TypeScript, and Vite. It allows users to create, add task, and delete columns and tasks, and drag-and-drop tasks between columns.

## Setup Instructions

1. **Clone the repository:**
   ```sh
   git clone https://github.com/your-username/vrit-kanban-board.git
   cd vrit-kanban-board
   ```

2 Install Dependencies
npm install

3 Run the development server
npm run dev

Technology Choices and Rationale
React: A popular JavaScript library for building user interfaces, chosen for its component-based architecture and strong community support.

TypeScript: A statically typed superset of JavaScript, chosen for its ability to catch errors at compile time and improve code quality.

Vite: A fast build tool and development server, chosen for its speed and ease of use with modern JavaScript frameworks.

Tailwind CSS: A utility-first CSS framework, chosen for its flexibility and ability to create custom designs quickly.

Dnd-kit: A drag-and-drop library for React, chosen for its modern API and ease of integration with React components.

Known Limitations/Trade-offs
State Management: The application uses local state management with React's useState and useMemo hooks. For larger applications, a more robust state management solution like Redux or Zustand might be necessary.

Accessibility: The drag-and-drop functionality may not be fully accessible to users with disabilities. Additional work is needed to ensure compliance with accessibility standards.

Performance: The application is designed for small to medium-sized Kanban boards. Performance may degrade with a large number of columns and tasks.

Future Improvements
State Management: Integrate a state management library like Redux or Zustand to handle more complex state interactions.

Backend Integration: Add a backend service to persist data and enable multi-user collaboration.

Accessibility: Improve accessibility by adding keyboard navigation and screen reader support for drag-and-drop interactions.

Testing: Add unit and integration tests to ensure the reliability of the application.

Styling: Enhance the UI/UX with more advanced styling and animations.
